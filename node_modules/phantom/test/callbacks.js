(function() {
  var Promise, assert, describe, exitPromise, phantom, t, vows,
    __slice = [].slice;

  vows = require('vows');

  assert = require('assert');

  phantom = require('../phantom');

  Promise = require('bluebird');

  describe = function(name, bat) {
    return vows.describe(name).addBatch(bat)["export"](module);
  };

  t = function(fn) {
    return function() {
      fn.apply(this, arguments);
    };
  };

  exitPromise = new Promise(function(resolve) {
    var wrapCreate;
    wrapCreate = function(p) {
      var wrapped, _cached;
      _cached = p.create;
      wrapped = false;
      return p.create = function() {
        var arg, args, idx, _i, _len;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (idx = _i = 0, _len = args.length; _i < _len; idx = ++_i) {
          arg = args[idx];
          if (!(typeof arg === 'object')) {
            continue;
          }
          args[idx]['onExit'] = resolve;
          wrapped = true;
          break;
        }
        if (wrapped !== true) {
          args.push({
            onExit: resolve
          });
        }
        return _cached.apply(phantom, args);
      };
    };
    return wrapCreate(phantom);
  });

  describe("The phantom module (callbacks)", {
    "Can create an instance": {
      topic: t(function() {
        return phantom.create({
          port: 12305
        }, (function(_this) {
          return function(ph) {
            return _this.callback(null, ph);
          };
        })(this));
      }),
      "which, when you call exit()": {
        topic: t(function(ph) {
          var countdown;
          countdown = null;
          exitPromise.then((function(_this) {
            return function() {
              clearTimeout(countdown);
              return _this.callback(null, 'success');
            };
          })(this));
          ph.exit();
          return countdown = setTimeout((function(_this) {
            return function() {
              return _this.callback('timeout');
            };
          })(this), 500);
        }),
        "runs the onExit callback within 500ms": function(status) {
          return assert.equal(status, 'success');
        }
      }
    }
  });

}).call(this);

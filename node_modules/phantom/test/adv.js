(function() {
  var app, appServer, assert, describe, express, phantom, t, vows;

  vows = require('vows');

  assert = require('assert');

  express = require('express');

  phantom = require('../phantom');

  describe = function(name, bat) {
    return vows.describe(name).addBatch(bat)["export"](module);
  };

  t = function(fn) {
    return function() {
      fn.apply(this, arguments);
    };
  };

  app = express();

  app.use(express["static"](__dirname));

  app.get('/', function(req, res) {
    return res.send("<html>\n  <head>\n    <title>Test page title</title>\n  </head>\n  <body>\n    <img src=\"/test.gif\" />\n  </body>\n</html>");
  });

  appServer = app.listen();

  describe("The phantom module (adv)", {
    "Can create an instance with --load-images=no": {
      topic: t(function() {
        return phantom.create('--load-images=no', (function(_this) {
          return function(ph) {
            return _this.callback(null, ph);
          };
        })(this));
      }),
      "which, when you open a page": {
        topic: t(function(ph) {
          return ph.createPage((function(_this) {
            return function(page) {
              return page.open("http://127.0.0.1:" + (appServer.address().port) + "/", function(status) {
                return setTimeout(function() {
                  return _this.callback(null, page, status);
                }, 1500);
              });
            };
          })(this));
        }),
        "and check the settings object": {
          topic: t(function(page, status) {
            return page.get('settings', (function(_this) {
              return function(s) {
                return _this.callback(null, s);
              };
            })(this));
          }),
          "loadImages isn't set": function(s) {
            return assert.strictEqual(s.loadImages, false);
          }
        },
        "succeeds": function(err, page, status) {
          return assert.equal(status, 'success');
        },
        "and check a test image": {
          topic: t(function(page) {
            return page.evaluate((function() {
              return document.getElementsByTagName('img')[0];
            }), (function(_this) {
              return function(img) {
                return _this.callback(null, img);
              };
            })(this));
          }),
          "it doesn't load": function(img) {
            assert.strictEqual(img.width, 0, "width should be 0");
            return assert.strictEqual(img.height, 0, "height should be 0");
          }
        }
      },
      teardown: function(ph) {
        appServer.close();
        return ph.exit();
      }
    },
    "Can create an instance with a custom port and --load-images=yes": {
      topic: t(function() {
        return phantom.create('--load-images=yes', {
          port: 12301
        }, (function(_this) {
          return function(ph) {
            return ph.get('args', function(args) {
              var port;
              port = args[0];
              return _this.callback(null, port);
            });
          };
        })(this));
      }),
      "which loads on the correct port": function(port) {
        return assert.equal(port, 12301);
      }
    }
  });

}).call(this);

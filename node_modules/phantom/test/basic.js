(function() {
  var assert, describe, phantom, t, vows;

  vows = require('vows');

  assert = require('assert');

  phantom = require('../phantom');

  describe = function(name, bat) {
    return vows.describe(name).addBatch(bat)["export"](module);
  };

  t = function(fn) {
    return function() {
      fn.apply(this, arguments);
    };
  };

  describe("The phantom module (basic)", {
    "Can create an instance": {
      topic: t(function() {
        return phantom.create({
          port: 12302
        }, (function(_this) {
          return function(ph) {
            return _this.callback(null, ph);
          };
        })(this));
      }),
      "which is an object": function(ph) {
        return assert.isObject(ph);
      },
      "with a version": {
        topic: t(function(ph) {
          return ph.get('version', (function(_this) {
            return function(val) {
              return _this.callback(null, val);
            };
          })(this));
        }),
        "defined": function(ver) {
          return assert.notEqual(ver, void 0);
        },
        "greater than or equal to 1.3": function(ver) {
          assert.ok(ver.major >= 1, "major version too low");
          return assert.ok(ver.minor >= 3, "minor version too low");
        }
      },
      "which can inject Javascript from a file": {
        topic: t(function(ph) {
          return ph.injectJs('test/inject.js', (function(_this) {
            return function(success) {
              return _this.callback(null, success);
            };
          })(this));
        }),
        "and succeed": function(success) {
          return assert.ok(success, "Injection should return true");
        }
      },
      "which can create a page": {
        topic: t(function(ph) {
          return ph.createPage((function(_this) {
            return function(page) {
              return _this.callback(null, page);
            };
          })(this));
        }),
        "which is an object": function(page) {
          return assert.isObject(page);
        }
      }
    }
  });

}).call(this);
